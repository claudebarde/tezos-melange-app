(include_subdirs unqualified)

;; `dirs` is a stanza to tell dune which subfolders from the current folder
;; (where the `dune` file is) it should process.
;; `:standard` is part of Dune's predicate language: https://dune.readthedocs.io/en/stable/reference/predicate-language.html#predicate-language
;; In the case of `dirs` stanza, `:standard` means "Process all subdirs, except those starting with underscore"
;; `\` operator will exclude the next value defined set.

;; With that in mind, we start by ignoring `node_modules`, because in most cases
;; there should be no `dune` files to be processed there by Dune.
;; If you need to consume an OCaml project from `node_modules`, this should work:
;; - remove the `dirs` stanza below
;; - add a `(subdir node_modules (dirs only_your_package))`
(dirs :standard \ node_modules)

; `melange.emit` is a Dune stanza that will produce build rules to generate
; JavaScript files from sources using the Melange compiler
; https://dune.readthedocs.io/en/stable/melange.html#melange-emit

(melange.emit
 ; The `target` field is used by Dune to put all JavaScript artifacts in a specific folder inside `_build/default`
 ; This field `target` allows to have multiple `melange.emit` stanzas in the `dune` file
 ; if, for example, we want to produce ES6 and CommonJS output from the same sources.
 (target output)
 ; The `alias` field can be used later on to build just the artifacts from this `melange.emit`
 ; by calling `dune build @react`.
 ; Note that if no `alias` field is defined, a default `melange` alias will be used instead.
 (alias react)
 ; Here's the list of dependencies of the stanza. In this case (being `melange.emit`),
 ; Dune will look into those dependencies and generate rules with JavaScript targets
 ; for the modules in those libraries as well.
 ; Caveat: the libraries need to be specified with `(modes melange)`.
 (libraries reason-react world melange.belt)
 ; By default, Dune will include all modules in the folder to the targets. With `modules` field
 ; we can tweak this default behavior by excluding `hello` from the list of targets of this stanza.
 ; See https://dune.readthedocs.io/en/stable/reference/predicate-language.html#predicate-language
 (modules :standard \ hello)
 (runtime_deps
  index.html
  (glob_files_rec src/*.css)
  (glob_files_rec src/*.svg)
  (glob_files_rec src/*.png)
  (glob_files_rec src/*.json))
 ; Uncomment the following to copy the generated JavaScript files inside the source tree
 (promote (until-clean))
 (preprocess
  ; The `pps` field is a list of ppx to apply to the sources before generating JavaScript. melange.ppx allows to use Melange attributes [@mel. ...] (https://melange.re/v2.0.0/communicate-with-javascript/#attributes)
  ; reason-react-ppx allows to use JSX for ReasonReact components by using the [@JSX] attributes from Reason: https://reasonml.github.io/docs/en/jsx
  (pps melange.ppx reason-react-ppx))
 ; module_systems is a list of module systems to generate code for (es6, commonjs)
 ; Change to (module_systems es6 commonjs) if you want to generate both
 ; https://melange.re/v2.0.0/build-system/#commonjs-or-es6-modules
 (module_systems es6))

(melange.emit
 (target node)
 (alias node)
 (libraries world)
 (modules hello)
 (module_systems commonjs))
